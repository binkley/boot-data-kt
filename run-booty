#!/usr/bin/env bash

export PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]:+${FUNCNAME[0]}():} '

set -e
set -u
set -o pipefail

readonly progname="${0##*/}"
readonly version=1

fmt=fmt
function -setup-terminal {
    if [[ ! -t 1 ]]
    then
        readonly fmt
        return 0
    fi

    : "${LINES:=$(tput lines)}"
    export LINES
    : "${COLUMNS:=$(tput cols)}"
    export COLUMNS

    local -r fmt_width=$((COLUMNS - 5))
    if (( fmt_width < 10 ))
    then
        echo "$progname: Your terminal is too narrow." >&2
        exit 2
    fi
    fmt="fmt -w $fmt_width"
    readonly fmt
}

function -setup-colors {
    local -r ncolors=$(tput colors)

    if $color && (( ${ncolors-0} > 7 ))
    then
        printf -v pblack "$(tput setaf 0)"
        printf -v pred "$(tput setaf 1)"
        printf -v pgreen "$(tput setaf 2)"
        printf -v pyellow "$(tput setaf 3)"
        printf -v pblue "$(tput setaf 4)"
        printf -v pmagenta "$(tput setaf 5)"
        printf -v pcyan "$(tput setaf 6)"
        printf -v pwhite "$(tput setaf 7)"
        printf -v pbold "$(tput bold)"
        printf -v punderline "$(tput smul)"
        printf -v pblink "$(tput blink)"
        printf -v pinvisible "$(tput invis)"
        printf -v preverse "$(tput rev)"
        printf -v preset "$(tput sgr0)"

        printf $preset  # Clear changes to help debugging
    else
        pblack=''
        pred=''
        pgreen=''
        pyellow=''
        pblue=''
        pmagenta=''
        pcyan=''
        pwhite=''
        pbold=''
        punderline=''
        pblink=''
        pinvisible=''
        preverse=''
        preset=''
    fi
    readonly pred
    readonly pgreen
    readonly pyellow
    readonly pblue
    readonly pmagenta
    readonly pcyan
    readonly pwhite
    readonly pbold
    readonly punderline
    readonly pblink
    readonly pinvisible
    readonly preverse
    readonly preset
}


function app {
    if [[ -r app.pid ]]
    then
        local oldpid=$(<app.pid)
        kill $oldpid 2>/dev/null
    fi

    local background=false
    while getopts :-: opt
    do
        [[ - == $opt ]] && opt=${OPTARG%%=*} OPTARG=${OPTARG#*=}
        case $opt in
        d | background ) background=true ;;
        * ) -print-usage >&2
            echo "Try '$progname --help' for more information." >&2
            exit 2
            ;;
        esac
    done
    shift $((OPTIND - 1))

    if $background
    then
        nohup ./mvnw spring-boot:run "$@" >app.log 2>&1 & echo $! >app.pid
        while :
        do
            sleep 1
            grep 'Started BootyliciousApplication' app.log >/dev/null && break
        done
    else
        ./mvnw spring-boot:run
    fi
}

function -app-help {
    cat <<'EOH'
Runs the app process in the background.  See `app.log` and `app.pid`.
EOH
}

function -touch-person {
    case $# in
        1 ) ;;
        * ) -print-usage >&2 ; exit 2 ;;
    esac

    local name="$1"
    shift

    if $dry_run
    then
        cat <<EOR
jurlq -X POST -H 'Content-Type: application/json; charset=UTF-8' \\
    -d @- localhost:8080/people <<EOD
{
     "name": "$name"
}
EOD
EOR
    else
        jurlq -X POST -H 'Content-Type: application/json; charset=UTF-8' \
            -d @- localhost:8080/people <<EOD
{
     "name": "$name"
}
EOD
    fi
}

function -cat-person {
    case $# in
        1 ) ;;
        * ) -print-usage >&2 ; exit 2 ;;
    esac

    local id="$1"
    shift

    $jurlq localhost:8080/people/"$id"
}

function -ed-person {
    case $# in
        2 ) ;;
        * ) -print-usage >&2 ; exit 2 ;;
    esac

    local id="$1"
    local name="$2"
    shift 2

    # TODO: RFC 6902 - can I use JSON patch?
    if $dry_run
    then
        cat <<EOR
jurlq -X PATCH -H 'Content-Type: application/merge-patch+json; charset=UTF-8' \
    -d @- localhost:8080/people/$id <<EOD
{
     "name": "$name"
}
EOD
EOR
    else
jurlq -X PATCH -H 'Content-Type: application/merge-patch+json; charset=UTF-8' \
    -d @- localhost:8080/people/$id <<EOD
{
     "name": "$name"
}
EOD
    fi
}

function -ls-people {
    case $# in
        0 ) ;;
        * ) -print-usage >&2 ; exit 2 ;;
    esac

    $jurlq localhost:8080/people
}

function -man-people {
    case $# in
        0 ) ;;
        * ) -print-usage >&2 ; exit 2 ;;
    esac

    $jurlq localhost:8080/profile/people
}

function -rm-person {
    case $# in
        1 ) ;;
        * ) -print-usage >&2 ; exit 2 ;;
    esac

    local id="$1" ; shift
    $jurlq -X DELETE localhost:8080/people/"$id"
}

function people {
    case "$1" in
    cat | ed | rm | touch )
        local cmd="$1"
        shift
        "-$cmd-person" "$@"
        ;;
    ls | man )
        local cmd="$1"
        shift
        "-$cmd-people" "$@"
        ;;
    * ) -print-usage >&2 ; exit 2 ;;
    esac
}

function -people-help-nofmt {
    cat <<EOH
Updates people:
   * cat - Prints an existing person
   * ed - Updates an existing person
   * ls - Lists all people
   * rm - Removes an existing person
   * touch - Adds a new person
EOH
}


declare -a tasks=($(declare -F | cut -d' ' -f3 | grep -v '^-' | sort))

# Internal functions and rest of script

function -print-usage {
    local all_tasks="${tasks[@]}"
    cat <<EOU | $fmt
Usage: $progname [-c|--color|--no-color] [-d|--debug] [-h|--help] [-n|--dry-run] [-v|--verbose] [${tasks[@]}]
EOU
}

function -format-help {
    case $# in
    0 ) sed 's/^/       /' | $fmt ;;
    * ) sed 's/^/       /' ;;
    esac
}

function -print-help {
    echo "$progname, version $version"
    -print-usage
    cat <<EOH

Flags:
  -c, --color     Print in color
      --no-color  Print without color
  -d, --debug     Print debug output while running
  -h, --help      Print help and exit normally
  -n, --dry-run   Do nothing (dry run); echo actions
  -v, --verbose   Verbose output

Tasks:
EOH
    for task in "${tasks[@]}"
    do
        echo "  * $task"

        local help_fn="-$task-help-nofmt"
        if declare -F -- $help_fn >/dev/null 2>&1
        then
            $help_fn | -format-help -X
            continue
        fi

        help_fn="-$task-help"
        if declare -F -- $help_fn >/dev/null 2>&1
        then
            $help_fn | -format-help
            continue
        fi
    done
}

jurlq=jurlq
function -dry-run {
    jurlq='echo jurlq'
}

-setup-terminal

[[ -t 1 ]] && color=true || color=false
debug=false
dry_run=false
verbose=false
while getopts :-: opt
do
    [[ - == $opt ]] && opt=${OPTARG%%=*} OPTARG=${OPTARG#*=}
    case $opt in
    c | color ) color=true ;;
    no-color ) color=false ;;
    d | debug ) debug=true ;;
    h | help ) -print-help ; exit 0 ;;
    n | dry-run ) dry_run=true ; -dry-run ;;
    v | verbose ) verbose=true ;;
    * ) -print-usage >&2
        echo "Try '$progname --help' for more information." >&2
        exit 2
        ;;
    esac
done
shift $((OPTIND - 1))

readonly color
readonly debug
readonly run
readonly verbose

case $# in
0 ) echo "$progname: No command." >&2
    echo "Try '$progname --help' for more information." >&2
    -print-usage >&2
    exit 2 ;;
* ) # TODO: This is ugly code
    cmd="$1"
    found=false
    for task in "${tasks[@]}"
    do
        [[ "$cmd" == "$task" ]] && found=true
    done
    $found || {
        echo "$progname: $cmd: Unknown command." >&2
        echo "Try '$progname --help' for more information." >&2
        -print-usage >&2
        exit 2
    }
    ;;
esac

-setup-colors
$debug && set -x


case $# in
* ) "$@" ; exit ;;
esac
